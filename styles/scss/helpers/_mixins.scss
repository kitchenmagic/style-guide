// ============================================================
//  LAYOUT
// ============================================================ 

// Creates a flex container
@mixin flexy(
	$disp: flex,
	$dir: null,
	$wrap: null,
	$just: null) {
	display: $disp;
	flex-direction: $dir;
	flex-wrap: $wrap;
	justify-content: $just;
}

// ============================================================
//  MEDIA QUERIES
// ============================================================ 

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}


// ============================================================
//  UI ELEMENTS
// ============================================================ 

// Transitions
@mixin transition($props) {
    -webkit-transition: $props;
    -moz-transition: $props;
    -ms-transition: $props;
    -o-transition: $props;
    transition: $props;
}

// Form placeholders
@mixin placeholder {
  &::-webkit-input-placeholder {@content};
  &:-moz-placeholder           {@content};
  &::-moz-placeholder          {@content};
  &:-ms-input-placeholder      {@content}; 
}

// Icons
// this is from the old website design (2015)
@mixin icon($icon-name, $position){
	font-family: $font-awesome;
	content: unquote("\"\\#{$icon-name}\"");
	
	@if $position !=  null{
		position: absolute;
	}

	@if $position == right {
		padding-left: $icon-padding;	
	} @else if $position == left {
		padding-right: $icon-padding;
	} @else {
		padding: 0;
	}
}

@mixin box-shadow($value) {
	-webkit-box-shadow: $value;
	-moz-box-shadow: $value;
	box-shadow: $value;
}


// OLD VARIABLES - NEED TO BE SORTED AND REMOVED 
// Shadows
// @mixin raised($background-color:null){
// 	@if $background-color == null{
// 		@include box-shadow( 0 1px 1px rgba(0,0,0, .5), inset 0 -1px 1px rgba(0,0,0, 0.2) );	
// 	}@else{
// 		@include box-shadow(0 0px 3px rgba(0,0,0,.6), inset 0 -1px 2px darken($background-color, 20 ), inset 0 0px 1px lighten($background-color, 50 ));
// 		//border-bottom: solid 1px darken($background-color, 5);
// 	}
// 	//@include box-shadow(0 0px 1px rgba(0,0,0, .6), inset 0 -1px 1px rgba(0, 0, 0, 0.5), inset 0 0px 1px rgba(255,255,255, .5));
// }






